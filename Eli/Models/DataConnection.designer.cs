#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Eli.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ELI")]
	public partial class DataConnectionDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttblBrotherSister(tblBrotherSister instance);
    partial void UpdatetblBrotherSister(tblBrotherSister instance);
    partial void DeletetblBrotherSister(tblBrotherSister instance);
    partial void InserttblBrotherSisterPatient(tblBrotherSisterPatient instance);
    partial void UpdatetblBrotherSisterPatient(tblBrotherSisterPatient instance);
    partial void DeletetblBrotherSisterPatient(tblBrotherSisterPatient instance);
    partial void InserttblFinancingFactor(tblFinancingFactor instance);
    partial void UpdatetblFinancingFactor(tblFinancingFactor instance);
    partial void DeletetblFinancingFactor(tblFinancingFactor instance);
    partial void InserttblParent(tblParent instance);
    partial void UpdatetblParent(tblParent instance);
    partial void DeletetblParent(tblParent instance);
    partial void InserttblParentPatient(tblParentPatient instance);
    partial void UpdatetblParentPatient(tblParentPatient instance);
    partial void DeletetblParentPatient(tblParentPatient instance);
    partial void InserttblPatient(tblPatient instance);
    partial void UpdatetblPatient(tblPatient instance);
    partial void DeletetblPatient(tblPatient instance);
    partial void InserttblReference(tblReference instance);
    partial void UpdatetblReference(tblReference instance);
    partial void DeletetblReference(tblReference instance);
    partial void InserttblReferenceTherapist(tblReferenceTherapist instance);
    partial void UpdatetblReferenceTherapist(tblReferenceTherapist instance);
    partial void DeletetblReferenceTherapist(tblReferenceTherapist instance);
    partial void InserttblReferenceTherapistTreatment(tblReferenceTherapistTreatment instance);
    partial void UpdatetblReferenceTherapistTreatment(tblReferenceTherapistTreatment instance);
    partial void DeletetblReferenceTherapistTreatment(tblReferenceTherapistTreatment instance);
    partial void InserttblTherapist(tblTherapist instance);
    partial void UpdatetblTherapist(tblTherapist instance);
    partial void DeletetblTherapist(tblTherapist instance);
    partial void InserttblTreatment(tblTreatment instance);
    partial void UpdatetblTreatment(tblTreatment instance);
    partial void DeletetblTreatment(tblTreatment instance);
    #endregion
		
		public DataConnectionDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ELIConnectionString2"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataConnectionDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataConnectionDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataConnectionDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataConnectionDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tblBrotherSister> tblBrotherSisters
		{
			get
			{
				return this.GetTable<tblBrotherSister>();
			}
		}
		
		public System.Data.Linq.Table<tblBrotherSisterPatient> tblBrotherSisterPatients
		{
			get
			{
				return this.GetTable<tblBrotherSisterPatient>();
			}
		}
		
		public System.Data.Linq.Table<tblFinancingFactor> tblFinancingFactors
		{
			get
			{
				return this.GetTable<tblFinancingFactor>();
			}
		}
		
		public System.Data.Linq.Table<tblParent> tblParents
		{
			get
			{
				return this.GetTable<tblParent>();
			}
		}
		
		public System.Data.Linq.Table<tblParentPatient> tblParentPatients
		{
			get
			{
				return this.GetTable<tblParentPatient>();
			}
		}
		
		public System.Data.Linq.Table<tblPatient> tblPatients
		{
			get
			{
				return this.GetTable<tblPatient>();
			}
		}
		
		public System.Data.Linq.Table<tblReference> tblReferences
		{
			get
			{
				return this.GetTable<tblReference>();
			}
		}
		
		public System.Data.Linq.Table<tblReferenceTherapist> tblReferenceTherapists
		{
			get
			{
				return this.GetTable<tblReferenceTherapist>();
			}
		}
		
		public System.Data.Linq.Table<tblReferenceTherapistTreatment> tblReferenceTherapistTreatments
		{
			get
			{
				return this.GetTable<tblReferenceTherapistTreatment>();
			}
		}
		
		public System.Data.Linq.Table<tblTherapist> tblTherapists
		{
			get
			{
				return this.GetTable<tblTherapist>();
			}
		}
		
		public System.Data.Linq.Table<tblTreatment> tblTreatments
		{
			get
			{
				return this.GetTable<tblTreatment>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblBrotherSister")]
	public partial class tblBrotherSister : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _FirstName;
		
		private string _SurName;
		
		private System.DateTime _BirthDate;
		
		private string _Gender;
		
		private string _StudyFramework;
		
		private EntitySet<tblBrotherSisterPatient> _tblBrotherSisterPatients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnSurNameChanging(string value);
    partial void OnSurNameChanged();
    partial void OnBirthDateChanging(System.DateTime value);
    partial void OnBirthDateChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnStudyFrameworkChanging(string value);
    partial void OnStudyFrameworkChanged();
    #endregion
		
		public tblBrotherSister()
		{
			this._tblBrotherSisterPatients = new EntitySet<tblBrotherSisterPatient>(new Action<tblBrotherSisterPatient>(this.attach_tblBrotherSisterPatients), new Action<tblBrotherSisterPatient>(this.detach_tblBrotherSisterPatients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Char(9) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(20)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurName", DbType="VarChar(20)")]
		public string SurName
		{
			get
			{
				return this._SurName;
			}
			set
			{
				if ((this._SurName != value))
				{
					this.OnSurNameChanging(value);
					this.SendPropertyChanging();
					this._SurName = value;
					this.SendPropertyChanged("SurName");
					this.OnSurNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="Date NOT NULL")]
		public System.DateTime BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(6)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyFramework", DbType="VarChar(50)")]
		public string StudyFramework
		{
			get
			{
				return this._StudyFramework;
			}
			set
			{
				if ((this._StudyFramework != value))
				{
					this.OnStudyFrameworkChanging(value);
					this.SendPropertyChanging();
					this._StudyFramework = value;
					this.SendPropertyChanged("StudyFramework");
					this.OnStudyFrameworkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblBrotherSister_tblBrotherSisterPatient", Storage="_tblBrotherSisterPatients", ThisKey="ID", OtherKey="BrotherSisterID")]
		public EntitySet<tblBrotherSisterPatient> tblBrotherSisterPatients
		{
			get
			{
				return this._tblBrotherSisterPatients;
			}
			set
			{
				this._tblBrotherSisterPatients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblBrotherSisterPatients(tblBrotherSisterPatient entity)
		{
			this.SendPropertyChanging();
			entity.tblBrotherSister = this;
		}
		
		private void detach_tblBrotherSisterPatients(tblBrotherSisterPatient entity)
		{
			this.SendPropertyChanging();
			entity.tblBrotherSister = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblBrotherSisterPatient")]
	public partial class tblBrotherSisterPatient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PatientID;
		
		private string _BrotherSisterID;
		
		private EntityRef<tblBrotherSister> _tblBrotherSister;
		
		private EntityRef<tblPatient> _tblPatient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIDChanging(string value);
    partial void OnPatientIDChanged();
    partial void OnBrotherSisterIDChanging(string value);
    partial void OnBrotherSisterIDChanged();
    #endregion
		
		public tblBrotherSisterPatient()
		{
			this._tblBrotherSister = default(EntityRef<tblBrotherSister>);
			this._tblPatient = default(EntityRef<tblPatient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Char(9) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					if (this._tblPatient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrotherSisterID", DbType="Char(9) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string BrotherSisterID
		{
			get
			{
				return this._BrotherSisterID;
			}
			set
			{
				if ((this._BrotherSisterID != value))
				{
					if (this._tblBrotherSister.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBrotherSisterIDChanging(value);
					this.SendPropertyChanging();
					this._BrotherSisterID = value;
					this.SendPropertyChanged("BrotherSisterID");
					this.OnBrotherSisterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblBrotherSister_tblBrotherSisterPatient", Storage="_tblBrotherSister", ThisKey="BrotherSisterID", OtherKey="ID", IsForeignKey=true)]
		public tblBrotherSister tblBrotherSister
		{
			get
			{
				return this._tblBrotherSister.Entity;
			}
			set
			{
				tblBrotherSister previousValue = this._tblBrotherSister.Entity;
				if (((previousValue != value) 
							|| (this._tblBrotherSister.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblBrotherSister.Entity = null;
						previousValue.tblBrotherSisterPatients.Remove(this);
					}
					this._tblBrotherSister.Entity = value;
					if ((value != null))
					{
						value.tblBrotherSisterPatients.Add(this);
						this._BrotherSisterID = value.ID;
					}
					else
					{
						this._BrotherSisterID = default(string);
					}
					this.SendPropertyChanged("tblBrotherSister");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPatient_tblBrotherSisterPatient", Storage="_tblPatient", ThisKey="PatientID", OtherKey="ID", IsForeignKey=true)]
		public tblPatient tblPatient
		{
			get
			{
				return this._tblPatient.Entity;
			}
			set
			{
				tblPatient previousValue = this._tblPatient.Entity;
				if (((previousValue != value) 
							|| (this._tblPatient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblPatient.Entity = null;
						previousValue.tblBrotherSisterPatients.Remove(this);
					}
					this._tblPatient.Entity = value;
					if ((value != null))
					{
						value.tblBrotherSisterPatients.Add(this);
						this._PatientID = value.ID;
					}
					else
					{
						this._PatientID = default(string);
					}
					this.SendPropertyChanged("tblPatient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblFinancingFactor")]
	public partial class tblFinancingFactor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FinancingFactorNumber;
		
		private string _Name;
		
		private string _FinancingFactorType;
		
		private string _ContactName;
		
		private string _ContcatPhoneNumber;
		
		private string _ContactMail;
		
		private EntitySet<tblTreatment> _tblTreatments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFinancingFactorNumberChanging(int value);
    partial void OnFinancingFactorNumberChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFinancingFactorTypeChanging(string value);
    partial void OnFinancingFactorTypeChanged();
    partial void OnContactNameChanging(string value);
    partial void OnContactNameChanged();
    partial void OnContcatPhoneNumberChanging(string value);
    partial void OnContcatPhoneNumberChanged();
    partial void OnContactMailChanging(string value);
    partial void OnContactMailChanged();
    #endregion
		
		public tblFinancingFactor()
		{
			this._tblTreatments = new EntitySet<tblTreatment>(new Action<tblTreatment>(this.attach_tblTreatments), new Action<tblTreatment>(this.detach_tblTreatments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinancingFactorNumber", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FinancingFactorNumber
		{
			get
			{
				return this._FinancingFactorNumber;
			}
			set
			{
				if ((this._FinancingFactorNumber != value))
				{
					this.OnFinancingFactorNumberChanging(value);
					this.SendPropertyChanging();
					this._FinancingFactorNumber = value;
					this.SendPropertyChanged("FinancingFactorNumber");
					this.OnFinancingFactorNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinancingFactorType", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string FinancingFactorType
		{
			get
			{
				return this._FinancingFactorType;
			}
			set
			{
				if ((this._FinancingFactorType != value))
				{
					this.OnFinancingFactorTypeChanging(value);
					this.SendPropertyChanging();
					this._FinancingFactorType = value;
					this.SendPropertyChanged("FinancingFactorType");
					this.OnFinancingFactorTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this.OnContactNameChanging(value);
					this.SendPropertyChanging();
					this._ContactName = value;
					this.SendPropertyChanged("ContactName");
					this.OnContactNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContcatPhoneNumber", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string ContcatPhoneNumber
		{
			get
			{
				return this._ContcatPhoneNumber;
			}
			set
			{
				if ((this._ContcatPhoneNumber != value))
				{
					this.OnContcatPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._ContcatPhoneNumber = value;
					this.SendPropertyChanged("ContcatPhoneNumber");
					this.OnContcatPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactMail", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string ContactMail
		{
			get
			{
				return this._ContactMail;
			}
			set
			{
				if ((this._ContactMail != value))
				{
					this.OnContactMailChanging(value);
					this.SendPropertyChanging();
					this._ContactMail = value;
					this.SendPropertyChanged("ContactMail");
					this.OnContactMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblFinancingFactor_tblTreatment", Storage="_tblTreatments", ThisKey="FinancingFactorNumber", OtherKey="FinancingFactorNumber")]
		public EntitySet<tblTreatment> tblTreatments
		{
			get
			{
				return this._tblTreatments;
			}
			set
			{
				this._tblTreatments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblTreatments(tblTreatment entity)
		{
			this.SendPropertyChanging();
			entity.tblFinancingFactor = this;
		}
		
		private void detach_tblTreatments(tblTreatment entity)
		{
			this.SendPropertyChanging();
			entity.tblFinancingFactor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblParent")]
	public partial class tblParent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _FirstName;
		
		private string _SurName;
		
		private System.DateTime _BirthDate;
		
		private string _Gender;
		
		private string _Address;
		
		private string _ContcatPhoneNumber;
		
		private string _ContactMail;
		
		private string _IsWorking;
		
		private EntitySet<tblParentPatient> _tblParentPatients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnSurNameChanging(string value);
    partial void OnSurNameChanged();
    partial void OnBirthDateChanging(System.DateTime value);
    partial void OnBirthDateChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnContcatPhoneNumberChanging(string value);
    partial void OnContcatPhoneNumberChanged();
    partial void OnContactMailChanging(string value);
    partial void OnContactMailChanged();
    partial void OnIsWorkingChanging(string value);
    partial void OnIsWorkingChanged();
    #endregion
		
		public tblParent()
		{
			this._tblParentPatients = new EntitySet<tblParentPatient>(new Action<tblParentPatient>(this.attach_tblParentPatients), new Action<tblParentPatient>(this.detach_tblParentPatients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Char(9) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(20)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurName", DbType="VarChar(20)")]
		public string SurName
		{
			get
			{
				return this._SurName;
			}
			set
			{
				if ((this._SurName != value))
				{
					this.OnSurNameChanging(value);
					this.SendPropertyChanging();
					this._SurName = value;
					this.SendPropertyChanged("SurName");
					this.OnSurNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="Date NOT NULL")]
		public System.DateTime BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(6)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContcatPhoneNumber", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string ContcatPhoneNumber
		{
			get
			{
				return this._ContcatPhoneNumber;
			}
			set
			{
				if ((this._ContcatPhoneNumber != value))
				{
					this.OnContcatPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._ContcatPhoneNumber = value;
					this.SendPropertyChanged("ContcatPhoneNumber");
					this.OnContcatPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactMail", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string ContactMail
		{
			get
			{
				return this._ContactMail;
			}
			set
			{
				if ((this._ContactMail != value))
				{
					this.OnContactMailChanging(value);
					this.SendPropertyChanging();
					this._ContactMail = value;
					this.SendPropertyChanged("ContactMail");
					this.OnContactMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsWorking", DbType="VarChar(2)")]
		public string IsWorking
		{
			get
			{
				return this._IsWorking;
			}
			set
			{
				if ((this._IsWorking != value))
				{
					this.OnIsWorkingChanging(value);
					this.SendPropertyChanging();
					this._IsWorking = value;
					this.SendPropertyChanged("IsWorking");
					this.OnIsWorkingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblParent_tblParentPatient", Storage="_tblParentPatients", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<tblParentPatient> tblParentPatients
		{
			get
			{
				return this._tblParentPatients;
			}
			set
			{
				this._tblParentPatients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblParentPatients(tblParentPatient entity)
		{
			this.SendPropertyChanging();
			entity.tblParent = this;
		}
		
		private void detach_tblParentPatients(tblParentPatient entity)
		{
			this.SendPropertyChanging();
			entity.tblParent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblParentPatient")]
	public partial class tblParentPatient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PatientID;
		
		private string _ParentID;
		
		private EntityRef<tblParent> _tblParent;
		
		private EntityRef<tblPatient> _tblPatient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIDChanging(string value);
    partial void OnPatientIDChanged();
    partial void OnParentIDChanging(string value);
    partial void OnParentIDChanged();
    #endregion
		
		public tblParentPatient()
		{
			this._tblParent = default(EntityRef<tblParent>);
			this._tblPatient = default(EntityRef<tblPatient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Char(9) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					if (this._tblPatient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Char(9) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._tblParent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblParent_tblParentPatient", Storage="_tblParent", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public tblParent tblParent
		{
			get
			{
				return this._tblParent.Entity;
			}
			set
			{
				tblParent previousValue = this._tblParent.Entity;
				if (((previousValue != value) 
							|| (this._tblParent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblParent.Entity = null;
						previousValue.tblParentPatients.Remove(this);
					}
					this._tblParent.Entity = value;
					if ((value != null))
					{
						value.tblParentPatients.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(string);
					}
					this.SendPropertyChanged("tblParent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPatient_tblParentPatient", Storage="_tblPatient", ThisKey="PatientID", OtherKey="ID", IsForeignKey=true)]
		public tblPatient tblPatient
		{
			get
			{
				return this._tblPatient.Entity;
			}
			set
			{
				tblPatient previousValue = this._tblPatient.Entity;
				if (((previousValue != value) 
							|| (this._tblPatient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblPatient.Entity = null;
						previousValue.tblParentPatients.Remove(this);
					}
					this._tblPatient.Entity = value;
					if ((value != null))
					{
						value.tblParentPatients.Add(this);
						this._PatientID = value.ID;
					}
					else
					{
						this._PatientID = default(string);
					}
					this.SendPropertyChanged("tblPatient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblPatient")]
	public partial class tblPatient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _PatientFirstName;
		
		private string _PatientSurName;
		
		private System.DateTime _BirthDate;
		
		private string _Gender;
		
		private string _EducationalFramework;
		
		private string _Address;
		
		private string _ContcatPhoneNumber;
		
		private EntitySet<tblBrotherSisterPatient> _tblBrotherSisterPatients;
		
		private EntitySet<tblParentPatient> _tblParentPatients;
		
		private EntitySet<tblReference> _tblReferences;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnPatientFirstNameChanging(string value);
    partial void OnPatientFirstNameChanged();
    partial void OnPatientSurNameChanging(string value);
    partial void OnPatientSurNameChanged();
    partial void OnBirthDateChanging(System.DateTime value);
    partial void OnBirthDateChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnEducationalFrameworkChanging(string value);
    partial void OnEducationalFrameworkChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnContcatPhoneNumberChanging(string value);
    partial void OnContcatPhoneNumberChanged();
    #endregion
		
		public tblPatient()
		{
			this._tblBrotherSisterPatients = new EntitySet<tblBrotherSisterPatient>(new Action<tblBrotherSisterPatient>(this.attach_tblBrotherSisterPatients), new Action<tblBrotherSisterPatient>(this.detach_tblBrotherSisterPatients));
			this._tblParentPatients = new EntitySet<tblParentPatient>(new Action<tblParentPatient>(this.attach_tblParentPatients), new Action<tblParentPatient>(this.detach_tblParentPatients));
			this._tblReferences = new EntitySet<tblReference>(new Action<tblReference>(this.attach_tblReferences), new Action<tblReference>(this.detach_tblReferences));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Char(9) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientFirstName", DbType="VarChar(20)")]
		public string PatientFirstName
		{
			get
			{
				return this._PatientFirstName;
			}
			set
			{
				if ((this._PatientFirstName != value))
				{
					this.OnPatientFirstNameChanging(value);
					this.SendPropertyChanging();
					this._PatientFirstName = value;
					this.SendPropertyChanged("PatientFirstName");
					this.OnPatientFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientSurName", DbType="VarChar(20)")]
		public string PatientSurName
		{
			get
			{
				return this._PatientSurName;
			}
			set
			{
				if ((this._PatientSurName != value))
				{
					this.OnPatientSurNameChanging(value);
					this.SendPropertyChanging();
					this._PatientSurName = value;
					this.SendPropertyChanged("PatientSurName");
					this.OnPatientSurNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="Date NOT NULL")]
		public System.DateTime BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(6) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EducationalFramework", DbType="VarChar(50)")]
		public string EducationalFramework
		{
			get
			{
				return this._EducationalFramework;
			}
			set
			{
				if ((this._EducationalFramework != value))
				{
					this.OnEducationalFrameworkChanging(value);
					this.SendPropertyChanging();
					this._EducationalFramework = value;
					this.SendPropertyChanged("EducationalFramework");
					this.OnEducationalFrameworkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContcatPhoneNumber", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string ContcatPhoneNumber
		{
			get
			{
				return this._ContcatPhoneNumber;
			}
			set
			{
				if ((this._ContcatPhoneNumber != value))
				{
					this.OnContcatPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._ContcatPhoneNumber = value;
					this.SendPropertyChanged("ContcatPhoneNumber");
					this.OnContcatPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPatient_tblBrotherSisterPatient", Storage="_tblBrotherSisterPatients", ThisKey="ID", OtherKey="PatientID")]
		public EntitySet<tblBrotherSisterPatient> tblBrotherSisterPatients
		{
			get
			{
				return this._tblBrotherSisterPatients;
			}
			set
			{
				this._tblBrotherSisterPatients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPatient_tblParentPatient", Storage="_tblParentPatients", ThisKey="ID", OtherKey="PatientID")]
		public EntitySet<tblParentPatient> tblParentPatients
		{
			get
			{
				return this._tblParentPatients;
			}
			set
			{
				this._tblParentPatients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPatient_tblReference", Storage="_tblReferences", ThisKey="ID", OtherKey="PatientID")]
		public EntitySet<tblReference> tblReferences
		{
			get
			{
				return this._tblReferences;
			}
			set
			{
				this._tblReferences.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblBrotherSisterPatients(tblBrotherSisterPatient entity)
		{
			this.SendPropertyChanging();
			entity.tblPatient = this;
		}
		
		private void detach_tblBrotherSisterPatients(tblBrotherSisterPatient entity)
		{
			this.SendPropertyChanging();
			entity.tblPatient = null;
		}
		
		private void attach_tblParentPatients(tblParentPatient entity)
		{
			this.SendPropertyChanging();
			entity.tblPatient = this;
		}
		
		private void detach_tblParentPatients(tblParentPatient entity)
		{
			this.SendPropertyChanging();
			entity.tblPatient = null;
		}
		
		private void attach_tblReferences(tblReference entity)
		{
			this.SendPropertyChanging();
			entity.tblPatient = this;
		}
		
		private void detach_tblReferences(tblReference entity)
		{
			this.SendPropertyChanging();
			entity.tblPatient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblReference")]
	public partial class tblReference : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReferenceNumber;
		
		private string _StatusReference;
		
		private string _OtherStatus;
		
		private string _AbuseType;
		
		private string _ReferenceSource;
		
		private string _PatientID;
		
		private EntitySet<tblReferenceTherapist> _tblReferenceTherapists;
		
		private EntityRef<tblPatient> _tblPatient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReferenceNumberChanging(int value);
    partial void OnReferenceNumberChanged();
    partial void OnStatusReferenceChanging(string value);
    partial void OnStatusReferenceChanged();
    partial void OnOtherStatusChanging(string value);
    partial void OnOtherStatusChanged();
    partial void OnAbuseTypeChanging(string value);
    partial void OnAbuseTypeChanged();
    partial void OnReferenceSourceChanging(string value);
    partial void OnReferenceSourceChanged();
    partial void OnPatientIDChanging(string value);
    partial void OnPatientIDChanged();
    #endregion
		
		public tblReference()
		{
			this._tblReferenceTherapists = new EntitySet<tblReferenceTherapist>(new Action<tblReferenceTherapist>(this.attach_tblReferenceTherapists), new Action<tblReferenceTherapist>(this.detach_tblReferenceTherapists));
			this._tblPatient = default(EntityRef<tblPatient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceNumber", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReferenceNumber
		{
			get
			{
				return this._ReferenceNumber;
			}
			set
			{
				if ((this._ReferenceNumber != value))
				{
					this.OnReferenceNumberChanging(value);
					this.SendPropertyChanging();
					this._ReferenceNumber = value;
					this.SendPropertyChanged("ReferenceNumber");
					this.OnReferenceNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusReference", DbType="VarChar(20)")]
		public string StatusReference
		{
			get
			{
				return this._StatusReference;
			}
			set
			{
				if ((this._StatusReference != value))
				{
					this.OnStatusReferenceChanging(value);
					this.SendPropertyChanging();
					this._StatusReference = value;
					this.SendPropertyChanged("StatusReference");
					this.OnStatusReferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherStatus", DbType="VarChar(MAX)")]
		public string OtherStatus
		{
			get
			{
				return this._OtherStatus;
			}
			set
			{
				if ((this._OtherStatus != value))
				{
					this.OnOtherStatusChanging(value);
					this.SendPropertyChanging();
					this._OtherStatus = value;
					this.SendPropertyChanged("OtherStatus");
					this.OnOtherStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbuseType", DbType="VarChar(20)")]
		public string AbuseType
		{
			get
			{
				return this._AbuseType;
			}
			set
			{
				if ((this._AbuseType != value))
				{
					this.OnAbuseTypeChanging(value);
					this.SendPropertyChanging();
					this._AbuseType = value;
					this.SendPropertyChanged("AbuseType");
					this.OnAbuseTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceSource", DbType="VarChar(20)")]
		public string ReferenceSource
		{
			get
			{
				return this._ReferenceSource;
			}
			set
			{
				if ((this._ReferenceSource != value))
				{
					this.OnReferenceSourceChanging(value);
					this.SendPropertyChanging();
					this._ReferenceSource = value;
					this.SendPropertyChanged("ReferenceSource");
					this.OnReferenceSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Char(9) NOT NULL", CanBeNull=false)]
		public string PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					if (this._tblPatient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblReference_tblReferenceTherapist", Storage="_tblReferenceTherapists", ThisKey="ReferenceNumber", OtherKey="ReferenceNumber")]
		public EntitySet<tblReferenceTherapist> tblReferenceTherapists
		{
			get
			{
				return this._tblReferenceTherapists;
			}
			set
			{
				this._tblReferenceTherapists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPatient_tblReference", Storage="_tblPatient", ThisKey="PatientID", OtherKey="ID", IsForeignKey=true)]
		public tblPatient tblPatient
		{
			get
			{
				return this._tblPatient.Entity;
			}
			set
			{
				tblPatient previousValue = this._tblPatient.Entity;
				if (((previousValue != value) 
							|| (this._tblPatient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblPatient.Entity = null;
						previousValue.tblReferences.Remove(this);
					}
					this._tblPatient.Entity = value;
					if ((value != null))
					{
						value.tblReferences.Add(this);
						this._PatientID = value.ID;
					}
					else
					{
						this._PatientID = default(string);
					}
					this.SendPropertyChanged("tblPatient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblReferenceTherapists(tblReferenceTherapist entity)
		{
			this.SendPropertyChanging();
			entity.tblReference = this;
		}
		
		private void detach_tblReferenceTherapists(tblReferenceTherapist entity)
		{
			this.SendPropertyChanging();
			entity.tblReference = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblReferenceTherapist")]
	public partial class tblReferenceTherapist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReferenceNumber;
		
		private string _TherapistID;
		
		private System.DateTime _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private EntitySet<tblReferenceTherapistTreatment> _tblReferenceTherapistTreatments;
		
		private EntityRef<tblReference> _tblReference;
		
		private EntityRef<tblTherapist> _tblTherapist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReferenceNumberChanging(int value);
    partial void OnReferenceNumberChanged();
    partial void OnTherapistIDChanging(string value);
    partial void OnTherapistIDChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public tblReferenceTherapist()
		{
			this._tblReferenceTherapistTreatments = new EntitySet<tblReferenceTherapistTreatment>(new Action<tblReferenceTherapistTreatment>(this.attach_tblReferenceTherapistTreatments), new Action<tblReferenceTherapistTreatment>(this.detach_tblReferenceTherapistTreatments));
			this._tblReference = default(EntityRef<tblReference>);
			this._tblTherapist = default(EntityRef<tblTherapist>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceNumber", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReferenceNumber
		{
			get
			{
				return this._ReferenceNumber;
			}
			set
			{
				if ((this._ReferenceNumber != value))
				{
					if (this._tblReference.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReferenceNumberChanging(value);
					this.SendPropertyChanging();
					this._ReferenceNumber = value;
					this.SendPropertyChanged("ReferenceNumber");
					this.OnReferenceNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TherapistID", DbType="Char(9) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TherapistID
		{
			get
			{
				return this._TherapistID;
			}
			set
			{
				if ((this._TherapistID != value))
				{
					if (this._tblTherapist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTherapistIDChanging(value);
					this.SendPropertyChanging();
					this._TherapistID = value;
					this.SendPropertyChanged("TherapistID");
					this.OnTherapistIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblReferenceTherapist_tblReferenceTherapistTreatment", Storage="_tblReferenceTherapistTreatments", ThisKey="ReferenceNumber,TherapistID", OtherKey="ReferenceNumber,TherapistID")]
		public EntitySet<tblReferenceTherapistTreatment> tblReferenceTherapistTreatments
		{
			get
			{
				return this._tblReferenceTherapistTreatments;
			}
			set
			{
				this._tblReferenceTherapistTreatments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblReference_tblReferenceTherapist", Storage="_tblReference", ThisKey="ReferenceNumber", OtherKey="ReferenceNumber", IsForeignKey=true)]
		public tblReference tblReference
		{
			get
			{
				return this._tblReference.Entity;
			}
			set
			{
				tblReference previousValue = this._tblReference.Entity;
				if (((previousValue != value) 
							|| (this._tblReference.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblReference.Entity = null;
						previousValue.tblReferenceTherapists.Remove(this);
					}
					this._tblReference.Entity = value;
					if ((value != null))
					{
						value.tblReferenceTherapists.Add(this);
						this._ReferenceNumber = value.ReferenceNumber;
					}
					else
					{
						this._ReferenceNumber = default(int);
					}
					this.SendPropertyChanged("tblReference");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblTherapist_tblReferenceTherapist", Storage="_tblTherapist", ThisKey="TherapistID", OtherKey="ID", IsForeignKey=true)]
		public tblTherapist tblTherapist
		{
			get
			{
				return this._tblTherapist.Entity;
			}
			set
			{
				tblTherapist previousValue = this._tblTherapist.Entity;
				if (((previousValue != value) 
							|| (this._tblTherapist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblTherapist.Entity = null;
						previousValue.tblReferenceTherapists.Remove(this);
					}
					this._tblTherapist.Entity = value;
					if ((value != null))
					{
						value.tblReferenceTherapists.Add(this);
						this._TherapistID = value.ID;
					}
					else
					{
						this._TherapistID = default(string);
					}
					this.SendPropertyChanged("tblTherapist");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblReferenceTherapistTreatments(tblReferenceTherapistTreatment entity)
		{
			this.SendPropertyChanging();
			entity.tblReferenceTherapist = this;
		}
		
		private void detach_tblReferenceTherapistTreatments(tblReferenceTherapistTreatment entity)
		{
			this.SendPropertyChanging();
			entity.tblReferenceTherapist = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblReferenceTherapistTreatment")]
	public partial class tblReferenceTherapistTreatment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReferenceNumber;
		
		private string _TherapistID;
		
		private int _TreatmentNumber;
		
		private EntityRef<tblReferenceTherapist> _tblReferenceTherapist;
		
		private EntityRef<tblTreatment> _tblTreatment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReferenceNumberChanging(int value);
    partial void OnReferenceNumberChanged();
    partial void OnTherapistIDChanging(string value);
    partial void OnTherapistIDChanged();
    partial void OnTreatmentNumberChanging(int value);
    partial void OnTreatmentNumberChanged();
    #endregion
		
		public tblReferenceTherapistTreatment()
		{
			this._tblReferenceTherapist = default(EntityRef<tblReferenceTherapist>);
			this._tblTreatment = default(EntityRef<tblTreatment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceNumber", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReferenceNumber
		{
			get
			{
				return this._ReferenceNumber;
			}
			set
			{
				if ((this._ReferenceNumber != value))
				{
					if (this._tblReferenceTherapist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReferenceNumberChanging(value);
					this.SendPropertyChanging();
					this._ReferenceNumber = value;
					this.SendPropertyChanged("ReferenceNumber");
					this.OnReferenceNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TherapistID", DbType="Char(9) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TherapistID
		{
			get
			{
				return this._TherapistID;
			}
			set
			{
				if ((this._TherapistID != value))
				{
					if (this._tblReferenceTherapist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTherapistIDChanging(value);
					this.SendPropertyChanging();
					this._TherapistID = value;
					this.SendPropertyChanged("TherapistID");
					this.OnTherapistIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TreatmentNumber", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TreatmentNumber
		{
			get
			{
				return this._TreatmentNumber;
			}
			set
			{
				if ((this._TreatmentNumber != value))
				{
					if (this._tblTreatment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTreatmentNumberChanging(value);
					this.SendPropertyChanging();
					this._TreatmentNumber = value;
					this.SendPropertyChanged("TreatmentNumber");
					this.OnTreatmentNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblReferenceTherapist_tblReferenceTherapistTreatment", Storage="_tblReferenceTherapist", ThisKey="ReferenceNumber,TherapistID", OtherKey="ReferenceNumber,TherapistID", IsForeignKey=true)]
		public tblReferenceTherapist tblReferenceTherapist
		{
			get
			{
				return this._tblReferenceTherapist.Entity;
			}
			set
			{
				tblReferenceTherapist previousValue = this._tblReferenceTherapist.Entity;
				if (((previousValue != value) 
							|| (this._tblReferenceTherapist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblReferenceTherapist.Entity = null;
						previousValue.tblReferenceTherapistTreatments.Remove(this);
					}
					this._tblReferenceTherapist.Entity = value;
					if ((value != null))
					{
						value.tblReferenceTherapistTreatments.Add(this);
						this._ReferenceNumber = value.ReferenceNumber;
						this._TherapistID = value.TherapistID;
					}
					else
					{
						this._ReferenceNumber = default(int);
						this._TherapistID = default(string);
					}
					this.SendPropertyChanged("tblReferenceTherapist");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblTreatment_tblReferenceTherapistTreatment", Storage="_tblTreatment", ThisKey="TreatmentNumber", OtherKey="TreatmentNumber", IsForeignKey=true)]
		public tblTreatment tblTreatment
		{
			get
			{
				return this._tblTreatment.Entity;
			}
			set
			{
				tblTreatment previousValue = this._tblTreatment.Entity;
				if (((previousValue != value) 
							|| (this._tblTreatment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblTreatment.Entity = null;
						previousValue.tblReferenceTherapistTreatments.Remove(this);
					}
					this._tblTreatment.Entity = value;
					if ((value != null))
					{
						value.tblReferenceTherapistTreatments.Add(this);
						this._TreatmentNumber = value.TreatmentNumber;
					}
					else
					{
						this._TreatmentNumber = default(int);
					}
					this.SendPropertyChanged("tblTreatment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblTherapist")]
	public partial class tblTherapist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _TherapistFirstName;
		
		private string _TherapistSurName;
		
		private System.DateTime _BirthDate;
		
		private string _Gender;
		
		private string _Address;
		
		private string _ContcatPhoneNumber;
		
		private string _ContactMail;
		
		private string _UserName;
		
		private string _Passcode;
		
		private EntitySet<tblReferenceTherapist> _tblReferenceTherapists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnTherapistFirstNameChanging(string value);
    partial void OnTherapistFirstNameChanged();
    partial void OnTherapistSurNameChanging(string value);
    partial void OnTherapistSurNameChanged();
    partial void OnBirthDateChanging(System.DateTime value);
    partial void OnBirthDateChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnContcatPhoneNumberChanging(string value);
    partial void OnContcatPhoneNumberChanged();
    partial void OnContactMailChanging(string value);
    partial void OnContactMailChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasscodeChanging(string value);
    partial void OnPasscodeChanged();
    #endregion
		
		public tblTherapist()
		{
			this._tblReferenceTherapists = new EntitySet<tblReferenceTherapist>(new Action<tblReferenceTherapist>(this.attach_tblReferenceTherapists), new Action<tblReferenceTherapist>(this.detach_tblReferenceTherapists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Char(9) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TherapistFirstName", DbType="VarChar(20)")]
		public string TherapistFirstName
		{
			get
			{
				return this._TherapistFirstName;
			}
			set
			{
				if ((this._TherapistFirstName != value))
				{
					this.OnTherapistFirstNameChanging(value);
					this.SendPropertyChanging();
					this._TherapistFirstName = value;
					this.SendPropertyChanged("TherapistFirstName");
					this.OnTherapistFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TherapistSurName", DbType="VarChar(20)")]
		public string TherapistSurName
		{
			get
			{
				return this._TherapistSurName;
			}
			set
			{
				if ((this._TherapistSurName != value))
				{
					this.OnTherapistSurNameChanging(value);
					this.SendPropertyChanging();
					this._TherapistSurName = value;
					this.SendPropertyChanged("TherapistSurName");
					this.OnTherapistSurNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="Date NOT NULL")]
		public System.DateTime BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(6)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContcatPhoneNumber", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string ContcatPhoneNumber
		{
			get
			{
				return this._ContcatPhoneNumber;
			}
			set
			{
				if ((this._ContcatPhoneNumber != value))
				{
					this.OnContcatPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._ContcatPhoneNumber = value;
					this.SendPropertyChanged("ContcatPhoneNumber");
					this.OnContcatPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactMail", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string ContactMail
		{
			get
			{
				return this._ContactMail;
			}
			set
			{
				if ((this._ContactMail != value))
				{
					this.OnContactMailChanging(value);
					this.SendPropertyChanging();
					this._ContactMail = value;
					this.SendPropertyChanged("ContactMail");
					this.OnContactMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(20)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passcode", DbType="VarChar(20)")]
		public string Passcode
		{
			get
			{
				return this._Passcode;
			}
			set
			{
				if ((this._Passcode != value))
				{
					this.OnPasscodeChanging(value);
					this.SendPropertyChanging();
					this._Passcode = value;
					this.SendPropertyChanged("Passcode");
					this.OnPasscodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblTherapist_tblReferenceTherapist", Storage="_tblReferenceTherapists", ThisKey="ID", OtherKey="TherapistID")]
		public EntitySet<tblReferenceTherapist> tblReferenceTherapists
		{
			get
			{
				return this._tblReferenceTherapists;
			}
			set
			{
				this._tblReferenceTherapists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblReferenceTherapists(tblReferenceTherapist entity)
		{
			this.SendPropertyChanging();
			entity.tblTherapist = this;
		}
		
		private void detach_tblReferenceTherapists(tblReferenceTherapist entity)
		{
			this.SendPropertyChanging();
			entity.tblTherapist = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblTreatment")]
	public partial class tblTreatment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TreatmentNumber;
		
		private string _TreatmentGoal;
		
		private string _TreatmentDescription;
		
		private System.DateTime _Date;
		
		private System.TimeSpan _Time;
		
		private string _Place;
		
		private string _IsPaid;
		
		private int _FinancingFactorNumber;
		
		private EntitySet<tblReferenceTherapistTreatment> _tblReferenceTherapistTreatments;
		
		private EntityRef<tblFinancingFactor> _tblFinancingFactor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTreatmentNumberChanging(int value);
    partial void OnTreatmentNumberChanged();
    partial void OnTreatmentGoalChanging(string value);
    partial void OnTreatmentGoalChanged();
    partial void OnTreatmentDescriptionChanging(string value);
    partial void OnTreatmentDescriptionChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTimeChanging(System.TimeSpan value);
    partial void OnTimeChanged();
    partial void OnPlaceChanging(string value);
    partial void OnPlaceChanged();
    partial void OnIsPaidChanging(string value);
    partial void OnIsPaidChanged();
    partial void OnFinancingFactorNumberChanging(int value);
    partial void OnFinancingFactorNumberChanged();
    #endregion
		
		public tblTreatment()
		{
			this._tblReferenceTherapistTreatments = new EntitySet<tblReferenceTherapistTreatment>(new Action<tblReferenceTherapistTreatment>(this.attach_tblReferenceTherapistTreatments), new Action<tblReferenceTherapistTreatment>(this.detach_tblReferenceTherapistTreatments));
			this._tblFinancingFactor = default(EntityRef<tblFinancingFactor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TreatmentNumber", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TreatmentNumber
		{
			get
			{
				return this._TreatmentNumber;
			}
			set
			{
				if ((this._TreatmentNumber != value))
				{
					this.OnTreatmentNumberChanging(value);
					this.SendPropertyChanging();
					this._TreatmentNumber = value;
					this.SendPropertyChanged("TreatmentNumber");
					this.OnTreatmentNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TreatmentGoal", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TreatmentGoal
		{
			get
			{
				return this._TreatmentGoal;
			}
			set
			{
				if ((this._TreatmentGoal != value))
				{
					this.OnTreatmentGoalChanging(value);
					this.SendPropertyChanging();
					this._TreatmentGoal = value;
					this.SendPropertyChanged("TreatmentGoal");
					this.OnTreatmentGoalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TreatmentDescription", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TreatmentDescription
		{
			get
			{
				return this._TreatmentDescription;
			}
			set
			{
				if ((this._TreatmentDescription != value))
				{
					this.OnTreatmentDescriptionChanging(value);
					this.SendPropertyChanging();
					this._TreatmentDescription = value;
					this.SendPropertyChanged("TreatmentDescription");
					this.OnTreatmentDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Time NOT NULL")]
		public System.TimeSpan Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Place", DbType="VarChar(MAX)")]
		public string Place
		{
			get
			{
				return this._Place;
			}
			set
			{
				if ((this._Place != value))
				{
					this.OnPlaceChanging(value);
					this.SendPropertyChanging();
					this._Place = value;
					this.SendPropertyChanged("Place");
					this.OnPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPaid", DbType="VarChar(2)")]
		public string IsPaid
		{
			get
			{
				return this._IsPaid;
			}
			set
			{
				if ((this._IsPaid != value))
				{
					this.OnIsPaidChanging(value);
					this.SendPropertyChanging();
					this._IsPaid = value;
					this.SendPropertyChanged("IsPaid");
					this.OnIsPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinancingFactorNumber", DbType="Int NOT NULL")]
		public int FinancingFactorNumber
		{
			get
			{
				return this._FinancingFactorNumber;
			}
			set
			{
				if ((this._FinancingFactorNumber != value))
				{
					if (this._tblFinancingFactor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFinancingFactorNumberChanging(value);
					this.SendPropertyChanging();
					this._FinancingFactorNumber = value;
					this.SendPropertyChanged("FinancingFactorNumber");
					this.OnFinancingFactorNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblTreatment_tblReferenceTherapistTreatment", Storage="_tblReferenceTherapistTreatments", ThisKey="TreatmentNumber", OtherKey="TreatmentNumber")]
		public EntitySet<tblReferenceTherapistTreatment> tblReferenceTherapistTreatments
		{
			get
			{
				return this._tblReferenceTherapistTreatments;
			}
			set
			{
				this._tblReferenceTherapistTreatments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblFinancingFactor_tblTreatment", Storage="_tblFinancingFactor", ThisKey="FinancingFactorNumber", OtherKey="FinancingFactorNumber", IsForeignKey=true)]
		public tblFinancingFactor tblFinancingFactor
		{
			get
			{
				return this._tblFinancingFactor.Entity;
			}
			set
			{
				tblFinancingFactor previousValue = this._tblFinancingFactor.Entity;
				if (((previousValue != value) 
							|| (this._tblFinancingFactor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblFinancingFactor.Entity = null;
						previousValue.tblTreatments.Remove(this);
					}
					this._tblFinancingFactor.Entity = value;
					if ((value != null))
					{
						value.tblTreatments.Add(this);
						this._FinancingFactorNumber = value.FinancingFactorNumber;
					}
					else
					{
						this._FinancingFactorNumber = default(int);
					}
					this.SendPropertyChanged("tblFinancingFactor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblReferenceTherapistTreatments(tblReferenceTherapistTreatment entity)
		{
			this.SendPropertyChanging();
			entity.tblTreatment = this;
		}
		
		private void detach_tblReferenceTherapistTreatments(tblReferenceTherapistTreatment entity)
		{
			this.SendPropertyChanging();
			entity.tblTreatment = null;
		}
	}
}
#pragma warning restore 1591
